{"version":3,"sources":["components/StartScreen/index.js","components/Game/index.js","serviceWorker.js","index.js"],"names":["StartScreen","state","selectingName","useThisUsernameForever","creatingPrivateRoom","enteringPrivateRoom","name","localStorage","getItem","privateRoomName","startPlay","_this","props","history","push","setState","onChangeName","event","target","value","onChangeRoomName","onChangeCheckbox","checked","onSubmitName","preventDefault","_this$state","replace","setItem","onSubmitRoomName","_this$state2","concat","createRoom","enterRoom","this","_this$state3","react_default","a","createElement","className","onClick","onSubmit","type","placeholder","onChange","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","socket","io","window","location","hostname","waitingStart","started","answered","oponentAnswered","gameEnded","answerSelected","correctAnswer","player","username","hits","anotherPlayer","question","onAnswerClick","emit","backToMenu","search","isCreating","split","length","roomName","on","error","alert","message","setTimeout","data","title","answers","map","answer","key","Boolean","match","ReactDOM","render","BrowserRouter","Switch","Route","component","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.394dfc6c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './index.css';\r\n\r\nclass StartScreen extends Component {\r\n  state = {\r\n    selectingName: false,\r\n    useThisUsernameForever: false,\r\n    creatingPrivateRoom: false,\r\n    enteringPrivateRoom: false,\r\n    name: localStorage.getItem('username') || '',\r\n    privateRoomName: ''\r\n  };\r\n\r\n  startPlay = () => {\r\n  \tconst useThisUsernameForever = localStorage.getItem('useThisUsernameForever');\r\n\r\n  \tif(useThisUsernameForever === 'true')\r\n  \t  return this.props.history.push('/game');\r\n\r\n  \tthis.setState({ selectingName: true });\r\n  }\r\n\r\n  onChangeName = event => {\r\n  \tconst name = event.target.value;\r\n  \tthis.setState({ name });\r\n  }\r\n\r\n  onChangeRoomName = event => {\r\n    const privateRoomName = event.target.value;\r\n    this.setState({ privateRoomName });\r\n  }\r\n\r\n  onChangeCheckbox = event => {\r\n  \tconst useThisUsernameForever = event.target.checked;\r\n  \tthis.setState({ useThisUsernameForever });\r\n  }\r\n\r\n  onSubmitName = event => {\r\n    event.preventDefault();\r\n    const { name, useThisUsernameForever, creatingPrivateRoom, enteringPrivateRoom } = this.state;\r\n\r\n    if(!name.replace(' ', ''))\r\n      return;\r\n\r\n    localStorage.setItem('username', name);\r\n    localStorage.setItem('useThisUsernameForever', useThisUsernameForever);\r\n\r\n    if(!creatingPrivateRoom && !enteringPrivateRoom)\r\n      return this.props.history.push('/game');\r\n\r\n    this.setState({ selectingName: false });\r\n  }\r\n\r\n  onSubmitRoomName = event => {\r\n    event.preventDefault();\r\n    const { privateRoomName, enteringPrivateRoom } = this.state;\r\n\r\n    if(!privateRoomName.replace(' ', ''))\r\n      return;\r\n\r\n    if(!enteringPrivateRoom)\r\n      this.props.history.push(`/game/?creating&room=${privateRoomName}`);\r\n    else\r\n      this.props.history.push(`/game/?room=${privateRoomName}`);\r\n  }\r\n\r\n  createRoom = () => {\r\n    this.setState({ creatingPrivateRoom: true, selectingName: true });\r\n  }\r\n\r\n  enterRoom = () => {\r\n    this.setState({ enteringPrivateRoom: true, selectingName: true });\r\n  }\r\n\r\n  render() {\r\n  \tconst { startPlay, onChangeName, onChangeRoomName, onChangeCheckbox, onSubmitName, onSubmitRoomName, createRoom, enterRoom } = this;\r\n  \tconst { selectingName, name, useThisUsernameForever, creatingPrivateRoom, privateRoomName, enteringPrivateRoom } = this.state;\r\n  \treturn (\r\n  \t  <div className=\"startScreen-imageBackground\">\r\n  \t    <div className=\"startScreen\">\r\n  \t      <h1>GeoBattle!</h1>\r\n\r\n  \t      { !selectingName && !creatingPrivateRoom && !enteringPrivateRoom ?\r\n  \t      \t<div className=\"startScreen-menu\">\r\n  \t          <span onClick={startPlay}>Jogar com um Jogador Aleatório</span>\r\n              <span onClick={createRoom}>Criar Sala</span>\r\n              <span onClick={enterRoom}>Entrar em uma Sala</span>\r\n  \t        </div> : null }\r\n\r\n          { selectingName ?\r\n            <div className=\"startScreen-selectName\">\r\n              <span>Escreva um Nome ou Apelido para Jogar</span>\r\n              <form onSubmit={onSubmitName}>\r\n                <input type=\"text\" placeholder=\"Nome ou Apelido\" onChange={onChangeName} value={name} />\r\n                { !name.replace(' ', '') ? null :\r\n                <div className=\"startScreen-checkboxContainer\">\r\n                  <input type=\"checkbox\" onChange={onChangeCheckbox} checked={useThisUsernameForever} />\r\n                  <span className={useThisUsernameForever ? 'startScreen-checkboxChecked' : ''}> Usar esse Nome Sempre </span>\r\n                </div> }\r\n                { !name.replace(' ', '') ? null : <button>Continuar</button> }\r\n              </form>\r\n            </div> : null}\r\n\r\n          { !selectingName && (creatingPrivateRoom || enteringPrivateRoom) ?\r\n            <div className=\"startScreen-createPrivateRoom\">\r\n              <span>Escreva o Nome da Sala</span>\r\n              <form onSubmit={onSubmitRoomName}>\r\n                <input type=\"text\" placeholder=\"Nome da Sala\" onChange={onChangeRoomName} value={privateRoomName} />\r\n                { !privateRoomName.replace(' ', '') ? null : <button>Continuar</button> }\r\n              </form>\r\n            </div>\r\n            : null}          \r\n  \t    </div>\r\n  \t  </div>\r\n  \t);\r\n  }\r\n}\r\n\r\nexport default StartScreen;","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './index.css';\r\n\r\nclass Game extends Component {\r\n  socket = io(`http://${window.location.hostname}:8080/`);\r\n\r\n  state = {\r\n    waitingStart: true,\r\n    started: false,\r\n    answered: false,\r\n    oponentAnswered: false,\r\n    gameEnded: false,\r\n    answerSelected: '',\r\n    correctAnswer: '',\r\n    player: { username: localStorage.getItem('username'), hits: 0 },\r\n    anotherPlayer: {},\r\n    question: {}\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const username = localStorage.getItem('username');\r\n    if(!username)\r\n      return this.props.history.push('/');\r\n\r\n    if(window.location.search) {\r\n      const isCreating = window.location.search.split('creating').length === 2;\r\n      const roomName = window.location.search.split('room=')[1];\r\n\r\n      if(isCreating)\r\n        this.socket.emit('createRoom', { username, roomName });\r\n      else\r\n        this.socket.emit('enterTheRoom', { username, roomName });\r\n    } else {\r\n      this.socket.emit('startRandomGame', username);\r\n    }\r\n\r\n    this.socket.on('errorOccorred', error => {\r\n      alert(error.message);\r\n      this.props.history.push('/');\r\n    });\r\n    this.socket.on('anotherPlayerDisconnected', () => {\r\n      alert('O outro jogador Desconectou');\r\n      this.props.history.push('/');\r\n    });\r\n    this.socket.on('createdRoom', () => this.setState({ waitingStart: true }));\r\n    this.socket.on('startGame', anotherPlayer => this.setState({ waitingStart: false, anotherPlayer: { name: anotherPlayer.name, hits: 0 } }));\r\n    this.socket.on('questionStart', question => {\r\n      const { started } = this.state;\r\n\r\n      if(!started)\r\n        this.setState({ question, oponentAnswered: false, answered: false, started: true, answerSelected: '', correctAnswer: '' });\r\n\r\n      setTimeout(() => {\r\n        this.setState({ question, oponentAnswered: false, answered: false, answerSelected: '', correctAnswer: '' });\r\n      }, 3000);\r\n    });\r\n    this.socket.on('oponentAnswer', () => this.setState({ oponentAnswered: true }));\r\n    this.socket.on('bothAnswer', data => this.setState({ correctAnswer: data.correctAnswer, player: data.player, anotherPlayer: data.anotherPlayer }));\r\n    this.socket.on('endGame', data => this.setState({ gameEnded: true, player: data.player, anotherPlayer: data.anotherPlayer }));\r\n  }\r\n\r\n  onAnswerClick = answerSelected => {\r\n    const { answered } = this.state;\r\n\r\n    if(answered)\r\n      return;\r\n\r\n    this.setState({ answered: true, answerSelected });\r\n    this.socket.emit('answer', answerSelected);\r\n  }\r\n\r\n  backToMenu = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    const { waitingStart, question, anotherPlayer, player, answerSelected, correctAnswer, oponentAnswered, gameEnded } = this.state;\r\n    const { onAnswerClick, backToMenu } = this;\r\n\r\n  \treturn (\r\n  \t  <div className=\"game\">\r\n        { waitingStart ? <span className=\"game-waiting\">Esperando Outro Player..</span> : null }\r\n        \r\n        { question.title && !gameEnded ?\r\n           <div className=\"game-question\">\r\n             <div className=\"game-anotherPlayer\">\r\n               <span className=\"game-anotherPlayerName\"> { anotherPlayer.name } </span>\r\n               <span> { anotherPlayer.hits === 1 ? '1 Acertos' : `${anotherPlayer.hits} Acertos` } </span>\r\n             </div>\r\n\r\n             <div className=\"game-player\">\r\n               <span className=\"game-playerYou\">Você</span>\r\n               <span> { player.hits === 1 ? '1 Acertos' : `${player.hits} Acertos` } </span>\r\n             </div>\r\n\r\n             <h2> { question.title } </h2>\r\n             { question.answers.map(answer => <button key={answer} \r\n              className={correctAnswer === answer ? 'correctAnswer' : (answerSelected === answer ? 'answerSelected' : '')}\r\n               onClick={() => onAnswerClick(answer)}> { answer } </button>) }\r\n             { oponentAnswered ? <span className=\"oponentAnswered\"> { anotherPlayer.name } já respondeu! </span> : null }\r\n           </div> \r\n        : null }\r\n\r\n        { gameEnded ?\r\n          <div className=\"game-ended\">\r\n            <h1>Fim da Rodada</h1>\r\n            <h2>{ player.hits > anotherPlayer.hits ? `Você ganhou de ${anotherPlayer.name}` : (player.hits < anotherPlayer.hits ? `Você perdeu de ${anotherPlayer.name}` : `Você empatou com ${anotherPlayer.name}`) }</h2>\r\n            <button onClick={backToMenu}>Voltar ao Menu</button>\r\n          </div>\r\n        : null }\r\n  \t  </div>\r\n  \t);\r\n  }\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './index.css';\n\nimport StartScreen from './components/StartScreen';\nimport Game from './components/Game';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route component={StartScreen} path=\"/\" exact />\n      <Route component={Game} path=\"/game\" exact />\n    </Switch>\n  </BrowserRouter>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}